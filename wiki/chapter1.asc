= 스칼라로 함수형 프로그래밍 시작하기
김지수 <kjs8469@gmail.com>
v1.0, 2017-01-10
:toc:

== 학습목표
* 책을 이해하는 수준의 *스칼라 언어*를 배우기
** 함수와 프로그램을 정의하는 법
** 프로그램의 실행
** 모듈, 객체, 이름공간
* 기본적 *함수형 프로그래밍 개념* 익히기
** **재귀**를 이용한 루프
** *고차함수*
** *다형적 함수*

== 스칼라 언어 배우기
=== 함수와 프로그램을 정의하는 법
[source,scala]
.목록2.1
----
// 이것은 주석
/* 이것도 주석 */
/** 문서화 주석 */
object MyModule {<1>
  def abs(n: Int): Int =<2>
    if (n < 0) -n
    else n<3>

  private def formatAbs(x: Int) = {<4><5>
    val msg = "The absolute value of %d is %d"<6>
    msg.format(x, abs(x))
  }

  def main(args: Array[String]): Unit =<7>
    println(formatAbs(-42))
}
----
<1> singleton 객체 선언
<2> 정수를 하나 받고 정수를 리턴하는 signature(좌변, left-hand side)
<3> 명시적인 return 이 없음
<4> Access modifiers(no modifier, protected, private)
<5> 반환타입을 명시적으로 지정하지 않음(타입추론으로 가능하지만 명시적으로 지정하는것을 권장)
<6> val 은 immutable
<7> Unit 은 void 과 같은 목적, 부수효과 발생(impure function)

----
object 키워드

* singleton 객체를 생성
* java의 정적 멤버를 가진 클래스를 사용하는 상황에 사용
* Companion Object를 만들때 사용
----

[TIP]
====
Scala access levels http://www.jesperdj.com/2016/01/08/scala-access-modifiers-and-qualifiers-in-detail/[Access modifiers in Java and Scala]
[cols="6*", options="header"]
|===
|Modifier|Class|Companion|Subclass|Package|World

|_no modifier_|Y|Y|Y|Y|Y

|`protected`|Y|Y|Y|N^*^|N

|`private`|Y|Y|N|N^*^|N
|===
^*^: Top-level protected and private members are accessible from inside the package.
====

=== 프로그램의 실행
* 보통 sbt 활용, IDE(IntelliJ, Eclipse 등)를 활용
* 콘솔에서 컴파일 및 실행가능
* REPL(read-evaluate-print loop)으로 대화식으로 실행가능

.콘솔에서 컴파일 및 실행
----
> scalac MyModule.scala

> scala MyModule
The absolute value of -42 is 42.

> scala MyModule.scala
The absolute value of -42 is 42.
----

.REPL로 실행
----
♫  scala
Welcome to Scala 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_51).
Type in expressions for evaluation. Or try :help.

scala> :load MyModule.scala
Loading MyModule.scala...
defined object MyModule

scala> MyModule.abs(-42)
res0: Int = 42
----

=== 모듈(module), 객체(object), 이름공간(namespace)
* 스칼라의 모든 값은 객체이다.
* 각 객체는 0개 또는 하나 이상의 멤버를 가질 수 있다.
* 모듈은 자신의 멤버들에게 namespace를 제공하는 것이 주된 목적인 객체
* 멤버는 def(메서드) 혹은 val, object 로 선언된 또 다른객체일 수 있다.
* 2 + 1 같은 표현식도 객체의 멤버를 호출
* 2 + 1 == 2.+(1)
* 중위(infix) 표기법으로 호출
* ::는 https://en.wikipedia.org/wiki/Operator_associativity[right-associative] ( http://stackoverflow.com/questions/1162924/what-good-are-right-associative-methods-in-scala[what-good-are-right-associative-methods-in-scala] )
* MyModule.abs(42) -> MyModule abs 42
* import 로 불러올 수 있다.

----
scala> import MyModule.abs
import MyModule.abs

scala> abs(-42)
res0: Int = 42
----

----
scala> import MyModule._
import MyModule._

scala> abs(-42)
res0: Int = 42
----

== 함수형 프로그래밍 개념

=== 고차 함수

=== 다형적 함수

=== 형식에서 도출된 구현
